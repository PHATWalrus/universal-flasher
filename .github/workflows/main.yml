name: Universal Build Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (X.Y.Z)'
        required: true

env:
  PYTHON_VERSION: '3.13.1'
  WORKSPACE: ${{ github.workspace }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            icon: icon.png
            artifact: flasher-linux

          - os: windows-latest
            arch: x86_64
            icon: icon.ico
            artifact: flasher-windows.exe

          - os: macos-13  # Intel runner
            arch: x86_64
            icon: icon.icns
            artifact: flasher-macos-intel

          - os: macos-latest  # ARM runner
            arch: arm64
            icon: icon.icns
            artifact: flasher-macos-arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify icon file
      run: |
        if [ ! -f "${{ env.WORKSPACE }}/${{ matrix.icon }}" ]; then
          echo "::error::Missing icon file: ${{ matrix.icon }}"
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.arch == 'arm64' && 'arm64' || 'x64' }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Build executable
      run: |
        output_name="flasher-${{ matrix.arch }}"
        pyinstaller \
          --noconfirm \
          --onefile \
          --console \
          --name "$output_name" \
          --icon "${{ env.WORKSPACE }}/${{ matrix.icon }}" \
          --distpath "dist/${{ matrix.arch }}" \
          --workpath "build/${{ matrix.arch }}" \
          --specpath "spec/${{ matrix.arch }}" \
          --target-arch ${{ matrix.arch }} \
          "${{ env.WORKSPACE }}/flash.py"

        # Verify architecture
        lipo -info "dist/${{ matrix.arch }}/$output_name"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: dist/${{ matrix.arch }}/*
        retention-days: 7

  release:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify architectures
        run: |
          echo "Verifying binary architectures:"
          lipo -info artifacts/flasher-macos-arm/flasher-arm64
          lipo -info artifacts/flasher-macos-intel/flasher-x86_64

      - name: Create universal binary
        run: |
          mkdir -p artifacts/universal
          lipo -create \
            artifacts/flasher-macos-arm/flasher-arm64 \
            artifacts/flasher-macos-intel/flasher-x86_64 \
            -output artifacts/universal/flasher-macos

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/flasher-*
            artifacts/universal/*
