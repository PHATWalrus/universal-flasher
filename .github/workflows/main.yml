name: Build and Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (X.Y.Z)'
        required: true

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact: flasher-windows.exe
            icon: icon.ico
            arch: x86_64
          - os: ubuntu-latest
            artifact: flasher-linux
            icon: icon.png
            arch: x86_64
          - os: macos-latest
            artifact: flasher-macos-intel
            icon: icon.icns
            arch: x86_64
            python-arch: x64
          - os: macos-latest
            artifact: flasher-macos-arm
            icon: icon.icns
            arch: arm64
            python-arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.1'
        architecture: ${{ matrix.python-arch || 'x64' }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.arch }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt --no-cache-dir

    - name: Build executable
      run: |
        output_name="flasher-${{ matrix.arch }}"
        pyinstaller \
          --noconfirm \
          --onefile \
          --console \
          --name "$output_name" \
          --icon "${{ matrix.icon }}" \
          --distpath dist/${{ matrix.arch }} \
          --workpath build/${{ matrix.arch }} \
          --specpath spec/${{ matrix.arch }} \
          flash.py
        
        # Verify binary existence
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          if [ ! -f "dist/${{ matrix.arch }}/$output_name.exe" ]; then
            echo "::error::Build failed - executable not found!"
            exit 1
          fi
        else
          if [ ! -f "dist/${{ matrix.arch }}/$output_name" ]; then
            echo "::error::Build failed - executable not found!"
            exit 1
          fi
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/${{ matrix.arch }}/*
          !**/*.spec

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Validate version format
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version format. Use X.Y.Z"
          exit 1
        fi
        echo "VERSION=v${{ inputs.version }}" >> $GITHUB_ENV

    - name: Generate changelog
      if: ${{ github.event_name == 'push' }}
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0)
        PREV_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^ 2>/dev/null || echo "")
        
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "## Release Highlights" >> $GITHUB_ENV
        echo "### Supported Architectures" >> $GITHUB_ENV
        echo "- Windows (x86_64)" >> $GITHUB_ENV
        echo "- Linux (x86_64)" >> $GITHUB_ENV
        echo "- macOS Intel (x86_64)" >> $GITHUB_ENV
        echo "- macOS Silicon (arm64)" >> $GITHUB_ENV
        
        if [ -n "$PREV_TAG" ]; then
          echo -e "\n## Changes since $PREV_TAG\n" >> $GITHUB_ENV
          git log --pretty=format:"- %s [%h]" $PREV_TAG..HEAD >> $GITHUB_ENV
          echo -e "\n[Full changelog](https://github.com/$GITHUB_REPOSITORY/compare/$PREV_TAG...$LATEST_TAG)" >> $GITHUB_ENV
        else
          echo -e "\n## Initial Release\n" >> $GITHUB_ENV
          git log --pretty=format:"- %s [%h]" >> $GITHUB_ENV
        fi
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || env.VERSION }}
        name: ${{ github.ref_name || env.VERSION }}
        body: ${{ env.RELEASE_NOTES }}
        files: |
          artifacts/flasher-windows.exe
          artifacts/flasher-linux
          artifacts/flasher-macos-intel
          artifacts/flasher-macos-arm
        draft: ${{ github.event_name == 'workflow_dispatch' }}
        prerelease: ${{ github.event_name == 'workflow_dispatch' }}
