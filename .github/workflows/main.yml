name: Release Production Builds

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (X.Y.Z)'
        required: true
        default: '0.0.0'

permissions:
  contents: write
  actions: read
  packages: read

env:
  PYTHON_VERSION: '3.13.2'

jobs:
  build:
    name: Build (${{ matrix.os }} ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            artifact: flasher-linux
            icon: icon.png
          - os: macos-latest
            arch: x86_64
            artifact: flasher-macos-intel
            icon: icon.icns
          - os: macos-latest
            arch: arm64
            artifact: flasher-macos-arm
            icon: icon.icns
          - os: windows-latest
            arch: x86_64
            artifact: flasher-windows.exe
            icon: icon.ico

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.arch == 'arm64' && 'arm64' || 'x64' }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          venv/
        key: ${{ matrix.os }}-${{ matrix.arch }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.arch }}-py${{ env.PYTHON_VERSION }}-

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install --user pyinstaller
        pip install -r requirements.txt --no-cache-dir

    - name: Build executable
      shell: bash
      run: |
        output_name="flasher-${{ matrix.arch }}"
        pyinstaller \
          --noconfirm \
          --onefile \
          --console \
          --name "$output_name" \
          --icon "${{ matrix.icon }}" \
          --distpath "dist/${{ matrix.arch }}" \
          --workpath "build/${{ matrix.arch }}" \
          --specpath "spec/${{ matrix.arch }}" \
          flash.py

        # Validate artifact
        artifact_path="dist/${{ matrix.arch }}/$output_name${{ matrix.os == 'windows-latest' && '.exe' || '' }}"
        if [ ! -f "$artifact_path" ]; then
          echo "::error::Build failed - missing $artifact_path"
          exit 1
        fi
        echo "BUILD_SUCCESS=true" >> $GITHUB_ENV

    - name: Upload artifact
      if: env.BUILD_SUCCESS == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: dist/${{ matrix.arch }}/*
        retention-days: 3

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Validate manual version
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version format. Use X.Y.Z"
          exit 1
        fi
        echo "VERSION=v${{ inputs.version }}" >> $GITHUB_ENV

    - name: Generate changelog
      id: changelog
      if: ${{ github.event_name == 'push' }}
      run: |
        latest_tag=$(git describe --tags --abbrev=0)
        prev_tag=$(git tag --sort=-creatordate | sed -n 2p)

        if [ -z "$prev_tag" ]; then
          echo "RELEASE_NOTES=## Initial Release" >> $GITHUB_ENV
          git log --pretty=format:"- %s [%h]" >> $GITHUB_ENV
        else
          echo "RELEASE_NOTES=## Changes since $prev_tag" >> $GITHUB_ENV
          git log --pretty=format:"- %s [%h]" $prev_tag..HEAD >> $GITHUB_ENV
          echo -e "\n[Full changelog](https://github.com/$GITHUB_REPOSITORY/compare/$prev_tag...$latest_tag)" >> $GITHUB_ENV
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || env.VERSION }}
        name: ${{ github.ref_name || env.VERSION }}
        body: |
          ### Supported Architectures
          - Windows x86_64
          - Linux x86_64
          - macOS Intel (x86_64)
          - macOS Silicon (arm64)

          ${{ env.RELEASE_NOTES }}
        files: |
          artifacts/flasher-windows.exe
          artifacts/flasher-linux
          artifacts/flasher-macos-intel
          artifacts/flasher-macos-arm
        draft: ${{ github.event_name == 'workflow_dispatch' }}
        prerelease: ${{ github.event_name == 'workflow_dispatch' }}
        discussion_category_name: 'Releases'
