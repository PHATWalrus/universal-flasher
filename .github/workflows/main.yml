name: Universal Build Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (X.Y.Z)'
        required: true

env:
  PYTHON_VERSION: '3.13.1'
  WORKSPACE: ${{ github.workspace }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            icon: icon.png
            artifact: flasher-linux
            spec_path: linux
          
          - os: windows-latest
            arch: x86_64
            icon: icon.ico
            artifact: flasher-windows.exe
            spec_path: windows

          - os: macos-latest
            arch: x86_64
            icon: icon.icns
            artifact: flasher-macos-intel
            spec_path: macos-intel

          - os: macos-latest
            arch: arm64
            icon: icon.icns
            artifact: flasher-macos-arm
            spec_path: macos-arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify icon file
      if: matrix.os != 'windows-latest'
      run: |
        if [ ! -f "${{ env.WORKSPACE }}/${{ matrix.icon }}" ]; then
          echo "::error::Missing icon file: ${{ matrix.icon }}"
          exit 1
        fi
    - name: Verify icon file (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (-not (Test-Path "$env:WORKSPACE/icon.ico")) {
          Write-Error "::error::Missing icon file: icon.ico"
          exit 1
        }
        else {
          Write-Host "âœ“ Icon file verified"
        }
      shell: pwsh


    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.arch == 'arm64' && 'arm64' || 'x64' }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: Build executable
      if: matrix.os != 'windows-latest'
      run: |
        output_name="flasher-${{ matrix.arch }}"
        pyinstaller \
          --noconfirm \
          --onefile \
          --console \
          --name "$output_name" \
          --icon "${{ env.WORKSPACE }}/${{ matrix.icon }}" \
          --distpath "dist/${{ matrix.arch }}" \
          --workpath "build/${{ matrix.arch }}" \
          --specpath "spec/${{ matrix.spec_path }}" \
          "${{ env.WORKSPACE }}/flash.py"

        # Verify output
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          test -f "dist/${{ matrix.arch }}/$output_name.exe"
        else
          test -f "dist/${{ matrix.arch }}/$output_name"
        fi
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $output_name = "flasher-x86_64"
        python -m PyInstaller `
          --noconfirm `
          --onefile `
          --console `
          --name "$output_name" `
          --icon "$env:WORKSPACE/icon.ico" `
          --distpath "dist/x86_64" `
          --workpath "build/x86_64" `
          --specpath "spec/windows" `
          "$env:WORKSPACE/flash.py"
    
        # Verify output
        $exePath = "dist/x86_64/${output_name}.exe"
        if (-not (Test-Path $exePath -PathType Leaf)) {
          Write-Error "::error::Missing executable: $exePath"
          exit 1
        }
      shell: pwsh
      env:
        WORKSPACE: ${{ github.workspace }}



    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: |
          dist/${{ matrix.arch }}/*
        retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Verify artifact files
      run: |
        echo "Artifact structure:"
        ls -R artifacts
        test -f artifacts/macos-arm-bin/flasher-arm64
        test -f artifacts/macos-intel-bin/flasher-x86_64

    - name: Create universal binary
      run: |
        mkdir -p artifacts/universal
        lipo -create \
          artifacts/macos-arm-bin/flasher-arm64 \
          artifacts/macos-intel-bin/flasher-x86_64 \
          -output artifacts/universal/flasher-macos
        file artifacts/universal/flasher-macos


    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/flasher-*
          artifacts/universal/*

